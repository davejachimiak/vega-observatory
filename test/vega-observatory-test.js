// Generated by CoffeeScript 1.7.1
(function() {
  describe('VegaObservatory', function() {
    beforeEach(function() {
      var options;
      window.RTCSessionDescription = (function() {
        function RTCSessionDescription() {}

        return RTCSessionDescription;

      })();
      window.RTCIceCandidate = (function() {
        function RTCIceCandidate() {}

        return RTCIceCandidate;

      })();
      options = {
        url: 'ws://0.0.0.0:3000',
        roomId: '/abc123',
        badge: {}
      };
      this.vegaObservatory = new VegaObservatory(options);
      this.peerConnectionFactory = this.vegaObservatory.peerConnectionFactory;
      return this.vegaClient = this.vegaObservatory.vegaClient;
    });
    afterEach(function() {
      return sinon.collection.restore();
    });
    describe('#call', function() {
      return it('delegates to the vega client', function() {
        var call;
        call = sinon.collection.stub(this.vegaClient, 'call');
        this.vegaObservatory.call();
        return expect(call).to.have.been.called;
      });
    });
    return describe('callbacks', function() {
      beforeEach(function() {
        return sinon.collection.stub(this.peerConnectionFactory, 'create').returns(this.peerConnection = {
          setRemoteDescription: function() {}
        });
      });
      describe('on callAccepted', function() {
        beforeEach(function() {
          this.peer1 = {
            peerId: 'peerId1',
            badge: {
              name: 'Dave'
            }
          };
          this.peer2 = {
            peerId: 'peerId2',
            badge: {
              name: 'Allie'
            }
          };
          return this.peers = [this.peer1, this.peer2];
        });
        it('saves references to all peers in the response', function() {
          this.vegaClient.trigger('callAccepted', this.peers);
          return expect(this.vegaObservatory.peerStore).to.eql({
            "peerId1": {
              badge: this.peer1.badge,
              peerConnection: this.peerConnection
            },
            "peerId2": {
              badge: this.peer2.badge,
              peerConnection: this.peerConnection
            }
          });
        });
        return it('triggers a callAccepted event on the observatory', function() {
          var object;
          object = {};
          this.vegaObservatory.on('callAccepted', function(payload) {
            return object.peers = payload;
          });
          this.vegaClient.trigger('callAccepted', this.peers);
          return expect(object.peers).to.eq(this.peers);
        });
      });
      describe('on offer', function() {
        beforeEach(function() {
          this.badge = {
            name: 'Dave'
          };
          this.payload = {
            peerId: 'peerId',
            badge: this.badge,
            offer: {
              'offer key': 'offer value'
            }
          };
          this.setRemoteDescription = sinon.collection.stub(this.peerConnection, 'setRemoteDescription');
          return this.rtcSessionDescription = sinon.createStubInstance(window.RTCSessionDescription);
        });
        it('saves a reference to the peer', function() {
          this.vegaClient.trigger('offer', this.payload);
          return expect(this.vegaObservatory.peerStore).to.eql({
            "peerId": {
              badge: this.badge,
              peerConnection: this.peerConnection
            }
          });
        });
        it('sets the offer on the peer connection via session description', function() {
          this.vegaClient.trigger('offer', this.payload);
          return expect(this.setRemoteDescription).to.have.been.calledWith(this.rtcSessionDescription);
        });
        return it('triggers an offer event', function() {
          var object;
          object = {};
          this.vegaObservatory.on('offer', function(payload) {
            return object.payload = payload;
          });
          this.vegaClient.trigger('offer', this.payload);
          return expect(object.payload).to.eq(this.payload);
        });
      });
      describe('on answer', function() {
        beforeEach(function() {
          this.peerId = 'peerId';
          this.peerConnection = {
            setRemoteDescription: function() {}
          };
          this.badge = {
            name: 'Dave'
          };
          this.vegaObservatory.peerStore = {
            'peerId': {
              badge: this.badge,
              peerConnection: this.peerConnection
            }
          };
          this.payload = {
            answer: {
              an: 'answer'
            },
            peerId: this.peerId
          };
          this.setRemoteDescription = sinon.collection.stub(this.peerConnection, 'setRemoteDescription');
          return this.rtcSessionDescription = sinon.createStubInstance(window.RTCSessionDescription);
        });
        it('sets the answer on the peer connection via session description', function() {
          this.vegaClient.trigger('answer', this.payload);
          return expect(this.setRemoteDescription).to.have.been.calledWith(this.rtcSessionDescription);
        });
        return it('triggers an answer event', function() {
          var object;
          object = {};
          this.vegaObservatory.on('answer', function(payload) {
            return object.payload = payload;
          });
          this.vegaClient.trigger('answer', this.payload);
          return expect(object.payload).to.eq(this.payload);
        });
      });
      describe('on candidate', function() {
        beforeEach(function() {
          this.peerConnection = {
            addIceCandidate: function() {}
          };
          this.badge = {
            name: 'Dave'
          };
          this.peerId = 'peerId';
          this.vegaObservatory.peerStore = {
            'peerId': {
              badge: this.badge,
              peerConnection: this.peerConnection
            }
          };
          this.payload = {
            candidate: {
              an: 'candidate'
            },
            peerId: this.peerId
          };
          this.addIceCandidate = sinon.collection.stub(this.peerConnection, 'addIceCandidate');
          return this.rtcIceCandidate = sinon.createStubInstance(window.RTCIceCandidate);
        });
        it('adds the ice candidate to the proper peer connection', function() {
          this.vegaClient.trigger('candidate', this.payload);
          return expect(this.addIceCandidate).to.have.been.calledWith(this.rtcIceCandidate);
        });
        return it('triggers a candidate event with the payload', function() {
          var object;
          object = {};
          this.vegaObservatory.on('candidate', function(payload) {
            return object.payload = payload;
          });
          this.vegaClient.trigger('candidate', this.payload);
          return expect(object.payload).to.eq(this.payload);
        });
      });
      return describe('on peerHangUp', function() {
        beforeEach(function() {
          this.badge = {
            name: 'Dave'
          };
          this.peerId = 'peerId';
          this.vegaObservatory.peerStore = {
            'peerId': {
              badge: this.badge,
              peerConnection: this.peerConnection
            }
          };
          return this.payload = {
            candidate: {
              an: 'candidate'
            },
            peerId: this.peerId
          };
        });
        return it('triggers a peerHangUp event', function() {
          var object;
          object = {};
          this.vegaObservatory.on('peerHangUp', function(payload) {
            return object.payload = payload;
          });
          this.vegaClient.trigger('peerHangUp', this.payload);
          return expect(object.payload).to.eq(this.payload);
        });
      });
    });
  });

}).call(this);
