// Generated by CoffeeScript 1.7.1
(function() {
  describe('VegaObservatory', function() {
    beforeEach(function() {
      var options;
      window.WebRTCPeerConnection = function() {};
      options = {
        url: 'ws://0.0.0.0:3000',
        roomId: '/abc123',
        badge: {}
      };
      this.vegaObservatory = new VegaObservatory(options);
      return this.vegaClient = this.vegaObservatory.vegaClient;
    });
    describe('#call', function() {
      return it('delegates to the vega client', function() {
        var call;
        call = sinon.collection.stub(this.vegaClient, 'call');
        this.vegaObservatory.call();
        return expect(call).to.have.been.called;
      });
    });
    return describe('callbacks', function() {
      return describe('on callAccepted', function() {
        beforeEach(function() {
          this.peer1 = {
            peerId: 'peerId1',
            badge: {
              name: 'Dave'
            }
          };
          this.peer2 = {
            peerId: 'peerId2',
            badge: {
              name: 'Allie'
            }
          };
          this.peers = [this.peer1, this.peer2];
          return sinon.collection.stub(window, 'WebRTCPeerConnection').returns(this.peerConnection = {});
        });
        it('saves references to all peers in the response', function() {
          this.vegaClient.trigger('callAccepted', this.peers);
          return expect(this.vegaObservatory.peerStore).to.eql({
            "peerId1": {
              badge: this.peer1.badge,
              peerConnection: this.peerConnection
            },
            "peerId2": {
              badge: this.peer2.badge,
              peerConnection: this.peerConnection
            }
          });
        });
        return it('triggers a callAccepted event on the observatory', function() {
          var object;
          object = {};
          this.vegaObservatory.on('callAccepted', function(peers) {
            return object.peers = peers;
          });
          this.vegaClient.trigger('callAccepted', this.peers);
          return expect(object.peers).to.eq(this.peers);
        });
      });
    });
  });

}).call(this);
