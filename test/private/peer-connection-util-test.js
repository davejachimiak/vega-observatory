// Generated by CoffeeScript 1.7.1
(function() {
  var chai, expect, sinon, sinonChai;

  chai = require('chai');

  sinon = require('sinon');

  sinonChai = require('sinon-chai');

  expect = chai.expect;

  chai.use(sinonChai);

  describe('PeerConnectionUtil', function() {
    beforeEach(function() {
      return this.peerConnectionUtil = require('../../private/peer-connection-util.js');
    });
    return describe('.createPeerConnection', function() {
      beforeEach(function() {
        var peerConnectionConfig, vegaObservatory;
        this.vegaClient = {
          candidate: function() {}
        };
        vegaObservatory = {
          vegaClient: this.vegaClient
        };
        this.peerId = 'peerId';
        peerConnectionConfig = {};
        this.pcConstructor = function(arg) {
          if (arg !== peerConnectionConfig) {
            throw new Error('must include peer connection config!');
          }
        };
        return this.peerConnection = this.peerConnectionUtil.createPeerConnection(vegaObservatory, this.peerId, peerConnectionConfig, this.pcConstructor);
      });
      it('returns an RTCPeerConnection', function() {
        return expect(this.peerConnection).to.be.instanceOf(this.pcConstructor);
      });
      return it('sends a candidate through the vega client on ice candidate', function() {
        var candidate, event;
        candidate = sinon.collection.stub(this.vegaClient, 'candidate');
        event = {
          candidate: {
            cool: 'stuff'
          }
        };
        this.peerConnection.onicecandidate(event);
        return expect(candidate).to.have.been.calledWith(event.candidate, this.peerId);
      });
    });
  });

}).call(this);
