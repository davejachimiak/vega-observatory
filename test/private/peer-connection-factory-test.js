// Generated by CoffeeScript 1.7.1
(function() {
  require('../test-helper');

  describe('PeerConnectionFactory', function() {
    beforeEach(function() {
      return this.peerConnectionFactory = require('../../private/peer-connection-factory.js');
    });
    afterEach(function() {
      return sinon.collection.restore();
    });
    return describe('.createPeerConnection', function() {
      beforeEach(function() {
        var peerConnectionConfig;
        this.vegaObservatory = {
          trigger: function() {},
          sendCandidate: function() {},
          addStream: function() {},
          localStream: this.localStream = new Object
        };
        this.peerId = 'peerId';
        this.peer = {
          peerId: this.peerId,
          badge: {
            name: 'Dave'
          }
        };
        peerConnectionConfig = {};
        this.pcConstructor = (function(_this) {
          return function(arg) {
            if (arg !== peerConnectionConfig) {
              throw new Error('must include peer connection config!');
            }
            return {
              addStream: function(stream) {
                return _this.streamAdded = stream;
              }
            };
          };
        })(this);
        return this.peerConnection = this.peerConnectionFactory.create(this.vegaObservatory, this.peer, peerConnectionConfig, this.pcConstructor);
      });
      it('adds the local stream', function() {
        return expect(this.streamAdded).to.eq(this.localStream);
      });
      it('sends a candidate through the vega client on ice candidate', function() {
        var event, sendCandidate;
        sendCandidate = sinon.collection.stub(this.vegaObservatory, 'sendCandidate');
        event = {
          candidate: {
            cool: 'stuff'
          }
        };
        this.peerConnection.onicecandidate(event);
        return expect(sendCandidate).to.have.been.calledWith(event.candidate, this.peerId);
      });
      return it('adds the stream to the observatory when a stream is added', function() {
        var addStream, event;
        addStream = sinon.collection.stub(this.vegaObservatory, 'addStream');
        event = {
          stream: 'an audio/video stream'
        };
        this.peerConnection.onaddstream(event);
        return expect(addStream).to.have.been.calledWith(this.peer.peerId, event.stream);
      });
    });
  });

}).call(this);
