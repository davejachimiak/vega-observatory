// Generated by CoffeeScript 1.7.1
(function() {
  var SessionDescriptionCreator, chai, expect, sinon, sinonChai;

  chai = require('chai');

  sinon = require('sinon');

  sinonChai = require('sinon-chai');

  expect = chai.expect;

  chai.use(sinonChai);

  SessionDescriptionCreator = require('../../private/session-description-creator.js');

  describe('SessionDescriptionCreator', function() {
    beforeEach(function() {
      this.observatory = new Object;
      this.peerId = 'an peer id';
      this.peerConnection = {
        createOffer: function() {},
        createAnswer: function() {}
      };
      return this.creator = new SessionDescriptionCreator(this.observatory, this.peerId, this.peerConnection);
    });
    afterEach(function() {
      return sinon.collection.restore();
    });
    return describe('main public behavior', function() {
      beforeEach(function() {
        this.failureCallback = this.creator.failureCallback;
        return this.stubSuccessCallback = (function(_this) {
          return function(arg) {
            return sinon.collection.stub(_this.creator, 'successCallback').withArgs(arg).returns(_this.successCallback = new Object);
          };
        })(this);
      });
      describe('#forOffer', function() {
        return it('creates an offer on the peer connection', function() {
          var createOffer;
          this.stubSuccessCallback(this.creator.sendOffer);
          createOffer = sinon.collection.stub(this.peerConnection, 'createOffer');
          this.creator.forOffer();
          return expect(createOffer).to.have.been.calledWith(this.successCallback, this.failureCallback);
        });
      });
      return describe('#forAnswer', function() {
        return it('creates an answer on the peer connection', function() {
          var createAnswer;
          this.stubSuccessCallback(this.creator.sendAnswer);
          createAnswer = sinon.collection.stub(this.peerConnection, 'createAnswer');
          this.creator.forAnswer();
          return expect(createAnswer).to.have.been.calledWith(this.successCallback, this.failureCallback);
        });
      });
    });
  });

}).call(this);
